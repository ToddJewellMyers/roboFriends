{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","inherits","createClass","value","error","info","setState","Component","App","onSearchChange","event","target","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_containers_App"],"mappings":"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","file":"static/js/main.38e59c3b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id }) => {\r\n    \r\nreturn (\r\n    <div className='tc bg-light-green dib pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n    <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n    </div>\r\n    </div>\r\n);\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../components/Card';\r\n\r\nconst CardList = ({robots}) => {\r\n           \r\nreturn (\r\n<div>\r\n  {\r\n    robots.map((user, i) => {\r\n        return  (\r\n        <Card \r\n        key={i} \r\n        id={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email}\r\n        />\r\n        );\r\n    })\r\n\r\n}\r\n    </div>\r\n\r\n\r\n);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\nreturn (\r\n    <div className='pa2'>\r\n    <input \r\n    className='pa3 bs b--green bg-lightest-blue'\r\n    type='search' \r\n    placeholder='search robots'\r\n    onChange={searchChange}\r\n     />\r\n     </div>\r\n)\r\n\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\nreturn (\r\n<div style={{overflowY: 'scroll', border: '2px solid black', height: '800px'}}>\r\n    {props.children}\r\n</div>\r\n);\r\n\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            hasError: false\r\n        }\r\n    }\r\ncomponentDidCatch(error, info) {\r\n\r\nthis.setState({ hasError:true })\r\n\r\n\r\n}\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Weeeeoooooowwwwww. do or do not but you cannot try.</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends Component  {\r\nconstructor() {\r\nsuper()\r\nthis.state = {\r\n    robots: [],\r\n    searchfield: ''\r\n}\r\n}\r\n\r\ncomponentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(users => this.setState({ robots: users}));  \r\n    \r\n    \r\n}\r\n\r\nonSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value }) \r\n}\r\n\r\nrender() {\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter(robots =>{\r\n        return robots.name.toLowerCase().includes(searchfield.toLowerCase())\r\n    })\r\nreturn !robots.length ?\r\n     <h1>Loading</h1> :\r\n (\r\n        <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange}/>\r\n        <Scroll>\r\n            <ErrorBoundary>\r\n        <CardList robots={filteredRobots}/>\r\n        </ErrorBoundary>\r\n        </Scroll>\r\n        </div>\r\n    );\r\n    }\r\n\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  \r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}